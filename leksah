#!/usr/bin/env bash
set -euo pipefail

echo -ne "\\033]0;Leksah FRONTEND-$1\\007"

# For cabal-new build to work we need 3 things.  A aspen-frontend.cabal, cabal.project and cabal.project.local.

echo Make aspen-frontend.cabal
sed 's|hs-source-dirs: \.|hs-source-dirs: common/src frontend/src frontend/src-bin|' < `nix-build --no-out-link -A $1.cabalFile --show-trace` > aspen-frontend.cabal || exit 1

echo Copy desired cabal.project
cp cabal.$1.project cabal.project || exit 1

OLDPWD="$PWD"
BUILDDIR="$PWD/dist-$1"
mkdir -p "$BUILDDIR"
CABAL_FILE="$(nix-build --no-out-link -A $1.cabalFile --show-trace)"
TMPDIR="$(mktemp -d 2>/dev/null || mktemp -d -t frontend-$1)"
function cleanup {
  rm -rf "$TMPDIR"
}
trap cleanup EXIT

echo Make cabal.project.local with cabal new-configure and run leksah
nix-shell --show-trace -A $1 --run "
cd "$TMPDIR"
shopt -s nullglob
ln -s "$OLDPWD"/{common,frontend}/src{,-bin}/* .
shopt -u nullglob
ln -s "$CABAL_FILE" frontend-$1.cabal
ln -s "$BUILDDIR" dist
"'
function setupCompilerEnvironmentPhase {
  eval "$setupCompilerEnvironmentPhase"
}
setupCompilerEnvironmentPhase
function compileBuildDriverPhase {
  eval "$compileBuildDriverPhase"
}
compileBuildDriverPhase
eval "$configurePhase"
unset GHC_PACKAGE_PATH
set -ex
# CABAL_CONFIG_FLAGS="$(echo "$configureFlags" | sed -e '\''s/--ghc-option=[^ ]*//g'\'' -e '\''s/--package-db=\([^ ]*\)/--package-db=\1 --ghc-pkg-option=--global-package-db=\1 --ghc-option=-package-db=\1/'\'')"
CABAL_CONFIG_FLAGS="$configureFlags"
eval "$(echo "$buildPhase" | sed '\''s/\.\/Setup build \(.*\)$/\( \
  cd ~\/haskell\/aspen \&\& \
  nix-shell -A '"$1"'.env --run " \
    cabal new-configure $CABAL_CONFIG_FLAGS \&\& \
    leksah"\)/'\'')"
'

# While working in leksah on frontendIosAArch64 you can deploy to iOS device with (replace [TEAM_ID]):
# $(nix-build --no-out-link -E "(import ./. {}).mkIosApp { bundleName = \"wrinkl\"; bundleIdentifier = \"com.wrinkl.ios\"; bundleVersionString = \"1.0\"; bundleVersion = \"1\"; exeName = \"mobile\"; exePath = dist-newstyle/build/aarch64-ios/ghc-8.1.20170106/Wrinkl-frontend-0.1/c/mobile/build/mobile; staticSrc = ./static; }")/bin/deploy [TEAM_ID] config/route

# While working in leksah on frontendIosIosSimulator you can run in simulator with:
# $(nix-build --no-out-link -E "(import ./. {}).mkIosApp { bundleName = \"wrinkl\"; bundleIdentifier = \"com.wrinkl.ios\"; bundleVersionString = \"1.0\"; bundleVersion = \"1\"; exeName = \"mobile\"; exePath = dist-newstyle/build/x86_64-ios/ghc-8.1.20170106/Wrinkl-frontend-0.1/c/mobile/build/mobile; staticSrc = ./static; }")/bin/run-in-sim config/route
